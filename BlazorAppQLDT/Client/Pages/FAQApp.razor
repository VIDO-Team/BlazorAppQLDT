@page "/faqapps"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorAppQLDT.Shared
@using BlazorAppQLDT.Client.Pages.Componants;
@attribute [Authorize]
@inject HttpClient Http
@inject IFAQAppService FAQAppService
@inject NavigationManager NavigationManager

<PageTitle>FAQ</PageTitle>
<style type="text/css">
#searchbox{
    @* margin-top: 15px; *@
    @* float:right; *@
    @* margin-right: 100px; *@
    @* border: 2px solid black; *@
    @* border-right: none; *@
    @* border-radius: 20px 20px 20px 20px; *@
    @* border: 0 solid black; *@
    width: 50%
}

#searchbox input{
    padding: 7px;
    @* border-right: none; *@
    border-radius: 5px 0 0 5px;
    font-size: 18px;
    font-family: sans-serif;
    width: 75%;
}

#searchbox button{
    @* float: right; *@
    background-color: lightseagreen;
    color: white;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
    @* position: relative; *@
    padding: 7px;
    border-left: none;
    @* border: none; *@
    font-family: sans-serif;
    font-size: 18px;
    width: 25%;
    @* margin-left: 10px; *@
}

#searchbox button:hover{
    opacity: .8;
}

#searchbox input:hover{
    opacity: .8;
}
</style>
<h3>FAQ</h3>
<div>
<BlazoredTypeahead SearchMethod="@SearchQuestion"
                   TValue="QuestionModel"
                   TItem="QuestionModel"
                   Value="selectedQuestion"
                   ValueChanged="HandleSearch"
                   ValueExpression="@(() => selectedQuestion)"
                   placeholder="Search...">
    <SelectedTemplate>
        @context.Question
    </SelectedTemplate>
    <ResultTemplate>
        @context.Question
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any questions found.
    </NotFoundTemplate>
</BlazoredTypeahead>
</div>
<br>
<div>
<button class="btn btn-primary" @onclick="CreateNewFAQ">Create FAQ</button>
</div>

@* <div id="searchbox">
<input type="text" placeholder="Search..." @bind-value="searchTerm"/><button class = "btn btn" @onclick="(()=>SearchTerm())">Search</button>
</div> *@
<br>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>QuestionId</th>
            <th>Questtion</th>
            <th>Answers</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var questions in question)
       {
           <tr>
               <td>@questions.Id</td>
               <td>@questions.Question</td>
               <td>@questions.FQA.Answers</td>
               <td>
                   <button class = "btn btn-warning" @onclick="(() => ShowFAQ(questions.Id))">
                       <i class="oi oi-pencil"></i>
                   </button>
                   
                   <button class = "btn btn-success" @onclick="(() => AddQuestion(questions.FQAId))">
                       <i class="oi oi-plus"></i>
                   </button>

                   <button class="btn btn-danger" @onclick="(() => DeleteQuestion(questions.Id))">
                       <i class="oi oi-trash"></i>
                   </button>
               </td>
           </tr>
       }
    </tbody>
</table>

<Confirm ConfirmationChanged="OnConfirmDeleteQuestion" @ref="DeleteConfirmation" >
</Confirm>

<Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
            PageIndex="@pageIndex"
            Radius="3"
            OnSelectedPage="@SelectedPage">
</Pagination>







@code {
    private QuestionModel selectedQuestion;
    private IEnumerable<QuestionModel> question = Enumerable.Empty<QuestionModel>();
    @* QuestionModel question1 = new QuestionModel {FQA = new AnswersModel()}; *@
    private string searchTerm;
    private int pageIndex = 1;
    private int itemsPerPage = 10;
    private int totalPages = 1;
    private int DeleteId { get; set; }
    protected BlazorAppQLDT.Componants.ConfirmBase DeleteConfirmation { get; set; }
    public List<QuestionModel> Questions {  get; set; }
    protected override async Task OnInitializedAsync()
    {
        await FAQAppService.GetQuestions();
        if(FAQAppService.FQADetails != null)
        {
            totalPages = (int)(FAQAppService.FQADetails.Count() / itemsPerPage);
            question = FAQAppService.FQADetails.Skip(0).Take(itemsPerPage);
        }
    }
    
    private void SelectedPage(int selectedPageIndex)
    {
        if (FAQAppService.FQADetails != null)
        {
            pageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (pageIndex - 1);
            question = FAQAppService.FQADetails.Skip(skipCount).Take(itemsPerPage);
        }
    }
    
    @* async void SearchTerm()
    {
        await FAQAppService.SearchQuestion(searchTerm);
        if(FAQAppService.FQADetails != null)
        {
            totalPages = (int)(FAQAppService.FQADetails.Count() / itemsPerPage);
            question = FAQAppService.FQADetails.Skip(0).Take(itemsPerPage);
        }
    } *@

    private void HandleSearch(QuestionModel question)
    {
        if (question == null) return;
        selectedQuestion = question;
        NavigationManager.NavigateTo($"editquestion/{selectedQuestion.Id}");
    }

    private async Task<IEnumerable<QuestionModel>> SearchQuestion(string searchText)
    {
        var response = await FAQAppService.SearchQuestion(searchText);
        return response;
    }

    void ShowFAQ(int id)
    {
        NavigationManager.NavigateTo($"editquestion/{id}");
    }
    void CreateNewFAQ()
    {
        NavigationManager.NavigateTo($"createfqa");
    }
    void AddQuestion(int id)
    {
        NavigationManager.NavigateTo($"addquestion/{id}");      
    }

    
    protected void DeleteQuestion(int deleteId)
    {
        DeleteId = deleteId;
        DeleteConfirmation.Show();
    }

    protected async Task OnConfirmDeleteQuestion(bool deleteConfirmed)
    {

        if(deleteConfirmed)
        {
            await FAQAppService.DeleteQuestion(DeleteId);
            await OnInitializedAsync();
        }
    }



    @* async Task DeleteQuestion(int id)
    {
        if(id != null)
            await FAQAppService.DeleteQuestion(id);
        NavigationManager.NavigateTo("/faqapps");
    } *@
}
