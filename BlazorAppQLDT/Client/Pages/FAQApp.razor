@page "/faqapps"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorAppQLDT.Shared
@using BlazorAppQLDT.Client.Pages.Componants;
@attribute [Authorize]
@inject HttpClient Http
@inject IFAQAppService FAQAppService
@inject NavigationManager NavigationManager

<PageTitle>FAQ</PageTitle>
<h3>FAQ</h3>
<div>
<BlazoredTypeahead SearchMethod="@SearchQuestion"
                   TValue="QuestionModel"
                   TItem="QuestionModel"
                   Value="selectedQuestion"
                   ValueChanged="HandleSearch"
                   ValueExpression="@(() => selectedQuestion)"
                   placeholder="Search...">
    <SelectedTemplate>
        @context.Question
    </SelectedTemplate>
    <ResultTemplate>
        @context.Question
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any questions found.
    </NotFoundTemplate>
</BlazoredTypeahead>
</div>

<br>
<GridColumn OnSearchTextChanged="OnQuestionSearchTextChanged"></GridColumn>
<br>

<div>
<button class="btn btn-primary" @onclick="CreateNewFAQ">Create FAQ</button>
</div>

<div id="searchbox">
@* <input type="text" placeholder="Search..." @bind-value="searchTerm"/><button class = "btn btn" @onclick="(()=>SearchTerm())">Search</button> *@
</div>
<br>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>QuestionId</th>
            <th>Question</th>
            <th>Answers</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        
        @foreach (var questions in question) 
       {
           <tr>
               <td>@questions.Id</td>
               <td>@questions.Question</td>
               <td>@questions.FQA.Answers</td>
               <td>
                   <button class = "btn btn-warning" @onclick="(() => ShowFAQ(questions.Id))">
                       <i class="oi oi-pencil"></i>
                   </button>
                   
                   <button class = "btn btn-success" @onclick="(() => AddQuestion(questions.FQAId))">
                       <i class="oi oi-plus"></i>
                   </button>

                   <button class="btn btn-danger" @onclick="(() => DeleteQuestion(questions.Id))">
                       <i class="oi oi-trash"></i>
                   </button>
               </td>
           </tr>
       }
    </tbody>
</table>
<br>
<div>
    <button class="btn btn-secondary" @onclick ="@(e => NavigateTo("first"))">@("<<")</button>
    <button class="btn btn-secondary" @onclick ="@(e => NavigateTo("prev"))">@("<")</button>
    @for (int i = 0; i < TotalPages; i++)
    {
        var pageNumber = i;
        <button class="btn @(CurrentPage == pageNumber? "btn-dark":"btn-info")" 
                @onclick="@(e => UpdateList(pageNumber))">@(i + 1)</button>
    }
    <button class="btn btn-secondary" @onclick ="@(e => NavigateTo("next"))">@(">")</button>
    <button class="btn btn-secondary" @onclick ="@(e => NavigateTo("last"))">@(">>")</button>
</div>

<Confirm ConfirmationChanged="OnConfirmDeleteQuestion" @ref="DeleteConfirmation" >
</Confirm>

@* <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
            PageIndex="@pageIndex"
            Radius="3"
            OnSelectedPage="@SelectedPage">
</Pagination> *@







@code {
    private QuestionModel selectedQuestion;
    private IEnumerable<QuestionModel> question = Enumerable.Empty<QuestionModel>();
    @* QuestionModel question1 = new QuestionModel {FQA = new AnswersModel()}; *@
    private string searchTerm;
    private int pageIndex = 1;
    private int itemsPerPage = 10;
    private int totalPages = 1;
    
    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }
    public bool IsGridViewFiltered { get; set; }
    public bool ReloadList { get; set; }

    private int DeleteId { get; set; }
    protected BlazorAppQLDT.Componants.ConfirmBase DeleteConfirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FAQAppService.GetQuestions();

        PageSize = 10;

        question = FAQAppService.FQADetails.Take(PageSize).ToList();
        TotalPages = (int)Math.Ceiling(FAQAppService.FQADetails.Count() / (decimal)PageSize);
        
        base.OnInitialized();
        //pagination
        @* if(FAQAppService.FQADetails != null)
        {
            totalPages = (int)(FAQAppService.FQADetails.Count() / itemsPerPage);
            question = FAQAppService.FQADetails.Skip(0).Take(itemsPerPage);
        } *@
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(!firstRender && IsGridViewFiltered)
        {
            UpdateList();
            IsGridViewFiltered = false;

            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    protected void UpdateList(int pageNumber = 0)
    {
        question = FAQAppService.FQADetails.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        TotalPages = (int)Math.Ceiling(FAQAppService.FQADetails.Count() / (decimal)PageSize);
        CurrentPage = pageNumber;
    }

    protected void NavigateTo(string direction)
    {
        if(direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;
        if(direction == "next" && CurrentPage != TotalPages - 1)
            CurrentPage += 1;
        if(direction == "first")
            CurrentPage = 0;
        if(direction == "last")
            CurrentPage = TotalPages - 1;

        UpdateList(CurrentPage);
    }

    //pagination
    @* private void SelectedPage(int selectedPageIndex)
    {
        if (FAQAppService.FQADetails != null)
        {
            pageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (pageIndex - 1);
            question = FAQAppService.FQADetails.Skip(skipCount).Take(itemsPerPage);
        }
    } *@
    
    @* async void SearchTerm()
    {
        await FAQAppService.SearchQuestion(searchTerm);
        if(FAQAppService.FQADetails != null)
        {
            totalPages = (int)(FAQAppService.FQADetails.Count() / itemsPerPage);
            question = FAQAppService.FQADetails.Skip(0).Take(itemsPerPage);
        }
    } *@

    private void HandleSearch(QuestionModel question)
    {
        if (question == null) return;
        selectedQuestion = question;
        NavigationManager.NavigateTo($"editquestion/{selectedQuestion.Id}");
    }

    private async Task<IEnumerable<QuestionModel>> SearchQuestion(string searchText)
    {
        var response = await FAQAppService.SearchQuestion(searchText);
        return response;
    }

    void ShowFAQ(int id)
    {
        NavigationManager.NavigateTo($"editquestion/{id}");
    }

    void CreateNewFAQ()
    {
        NavigationManager.NavigateTo($"createfqa");
    }

    void AddQuestion(int id)
    {
        NavigationManager.NavigateTo($"addquestion/{id}");      
    }

    protected void DeleteQuestion(int deleteId)
    {
        DeleteId = deleteId;
        DeleteConfirmation.Show();
    }

    protected async Task OnConfirmDeleteQuestion(bool deleteConfirmed)
    {

        if(deleteConfirmed)
        {
            await FAQAppService.DeleteQuestion(DeleteId);
            await OnInitializedAsync();
        }
    }

    @* private async Task<List<QuestionModel>> OnQuestionSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
        string searchText = changeEventArgs.Value.ToString();
        return question = await FAQAppService.SearchQuestion(searchText);
    } *@

    private void OnQuestionSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
        string searchText = changeEventArgs.Value.ToString();
        @* IsGridViewFiltered = true; *@

        question = FAQAppService.FQADetails.Where(q => q.Question.Contains(searchText) || q.FQA.Answers.Contains(searchText)).ToList();
    }
}
